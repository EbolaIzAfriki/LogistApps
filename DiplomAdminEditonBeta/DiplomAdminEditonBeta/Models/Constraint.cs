//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DiplomAdminEditonBeta
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Constraint
    {
        public int Id { get; set; }
        public int IdTask { get; set; }
        public int TypeConstraintId { get; set; }
        public Nullable<int> ProductCount { get; set; }
        public string IdPoints { get; set; }
    
        public virtual Task Task { get; set; }
        public virtual TypeConstraint TypeConstraint { get; set; }

        public List<TypeConstraint> typeConstraints
        {
            get
            {
                return TypeConstraint.typeConstraints.ToList();
            }
        }



        public List<Point> PointsVendors
        {
            get
            {
                return Task.Point.Where(p => p.Client.TypeId == 2).ToList();
            }
        }

        public List<Point> PointsConsumers
        {
            get
            {
                return Task.Point.Where(p => p.Client.TypeId == 1).ToList();
            }
        }

        public Point PointVendor
        {
            get
            {
                if (IdPoints == null)
                    return null;
                int id = int.Parse(IdPoints.Split('&')[0]);
                return Task.Point.FirstOrDefault(p => p.Position == id && p.Client.TypeId == 2);
            }
        }

        public Point PointConsumer
        {
            get
            {
                if (IdPoints == null)
                    return null;
                int id = int.Parse(IdPoints.Split('&')[1]);
                return Task.Point.FirstOrDefault(p => p.Position == id && p.Client.TypeId == 1);
            }
        }
    }
}
